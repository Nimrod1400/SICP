(define (repeat f n)
  (define (double f)
    (lambda (x) (f (f x))))
  (define (compose f g) 
    (lambda (x) (f (g x))))
  (define (iter result count)
    (cond ((= count 0) result)
          ((even? count) (iter (double result) (/ count 2)))
          (else (iter (compose f result) (- count 1)))))
  (iter f (- n 1)))
(define (fixed-point f first-guess)
  (define tol 0.00001)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tol))
  (define (iter guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	next
	(iter next))))
  (iter first-guess))
(define (average-damp f)
  (lambda (x) 
    (/ (+ x (f x)) 2)))
(define (cubic-root x)
  (fixed-point 
    (average-damp (lambda (y) (/ x (* y y))))
    1.0))
(define (nth-root x n)
  (fixed-point
    ((repeat average-damp
	     (floor (/ (log n) (log 2))))
     (lambda (y) (/ x (expt y (- n 1)))))
    1.0))
