(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d)))
	(sign 
	  (cond ((and (> n 0) (> d 0)) +)
		((and (< n 0) (< d 0)) +)
		(else -)))
	(n (abs n))
	(d (abs d)))
    (cons (sign (/ n g))
	  (/ d g))))
(define numer car)
(define denom cdr)
(define (print-rat x)
  (display (numer x))
  (display "/")
  (display (denom x))
  (newline))
(define (as-rat op x y)
  (make-rat (op (* (numer x) (denom y))
	        (* (numer y) (denom x)))
	    (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
	    (* (denom x) (denom y))))
(define (div-rat x y) 
  (make-rat (* (numer x) (denom y))
	    (* (numer y) (denom x))))
(define (eq-rat?)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
