(define tolerance 0.00001)
(define dx 0.00001)
(define (average a b) (/ (+ a b) 2))
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (cond
        ((close-enough? next guess) next)
        (else (try next)))))
  (try first-guess))
(define (deriv g)
  (lambda (x) 
    (/ (- (g (+ x dx)) (g x)) 
       dx)))
(define (newton-transform g) 
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (cubic a b c)
  (lambda (x) (+ (* x x x) 
		 (* a x x) 
		 (* b x)
		 c)))
