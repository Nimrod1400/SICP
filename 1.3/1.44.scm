(define dx 0.00001)
(define (compose f g)
  (lambda (x) (f (g x))))
(define (double f)
  (lambda (x) (f (f x))))
(define (repeat f n)
  (define (iter result count)
    (cond ((= count 0) result)
          ((even? count) (iter (double result) (/ count 2)))
          (else (iter (compose f result) (- count 1)))))
  (iter f (- n 1)))
(define (smooth f)
  (lambda (x) 
    (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 
       3)))
(define (n-smoothed f n)
  ((repeat smooth n) f))
